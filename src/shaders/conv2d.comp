#version 320 es

#define LOCAL_SIZE_X %d
#define LOCAL_SIZE_Y %d

layout (local_size_x = LOCAL_SIZE_X, local_size_y = LOCAL_SIZE_Y, local_size_z = 1) in;

layout(rgba8ui, binding = 0) readonly uniform highp uimage2D input_image2d;
layout(rgba8ui, binding = 1) writeonly uniform highp uimage2D output_image2d;
layout(std430, binding = 2) readonly buffer kernel_buffer { highp float kernel[]; };

void main()
{
    ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size_in = imageSize(input_image2d);
    ivec2 size_out = imageSize(output_image2d);
    float kernel_size = sqrt(float(kernel.length()));
    float res = 0.0f;
    int kernel_span, i, x, y;

    if (kernel_size != floor(kernel_size) || mod(kernel_size, 2.0f) != 1.0f) {
        return;
    }

    if (size_in.x != size_out.x || size_in.y != size_out.y) {
        return;
    }

    kernel_span = (int(kernel_size) - 1) / 2;
    if (pos.x >= kernel_span && pos.x < (size_in.x - kernel_span) && pos.y >= kernel_span && pos.y < (size_in.y - kernel_span)) {
        i = 0;
        for (y = -kernel_span; y <= kernel_span; y++) {
            for (x = -kernel_span; x <= kernel_span; x++) {
                res += float(imageLoad(input_image2d, pos + ivec2(x, y)).r) * kernel[i];
                i++;
            }
        }
    }

    imageStore(output_image2d, pos, uvec4(uint(res), uint(res), uint(res), 1.0f));
}
